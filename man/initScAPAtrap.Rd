% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scAPAtrap_funlib.R
\name{initScAPAtrap}
\alias{initScAPAtrap}
\title{Initiate scAPAtrap and check/set parameters}
\usage{
initScAPAtrap(tools, trap.params, inputBam, outputDir, ...)
}
\arguments{
\item{tools}{A list contains four tools used in scAPAtrap.}

\item{trap.params}{Parameters of running scAPAtrap, see global variable \code{\link{TRAP.PARAMS}}.}

\item{inputBam}{Input bam file name. If trap.params$chr is NULL, will try to get chrs from inputBam.}

\item{outputDir}{Output dir for storing scAPAtrap's final output -- peaks and counts files.
If only dirname is given (e.g., APAres but not ./APAres), then will add path of inputBam to the dir name.
If outputDir already exists, an error will be raised to avoid overwritting.
However, many temporary files are generated during running scAPAtrap, which could be seen from global variable TRAPFILES. Those files marked with * could be savely deleted.}

\item{...}{Arguments passed to other methods and/or advanced arguments.
Advanced arguments:
\describe{
\item{verbose }{If `TRUE` basic status updates will be printed along the way.}
\item{logf }{If not NULL, then it should be a character string denoting a file name.
If logf is a character string, then message will be written to `logf`.
But if logf already exists, this function will quit to avoid overwriting an existing log file.
The logf will log full information during scAPAtrap, including time, command, and output files.}
}}
}
\value{
NULL. But the input tools, trap.params, inputBam, outputDir may be modifed during initiation.
}
\description{
Initiate scAPAtrap and check/set parameters
}
\examples{
\dontrun{
tools=list(samtools='/home/dell/miniconda3/envs/scAPA/bin/samtools',
           umitools='/home/dell/miniconda3/envs/scAPA/bin/umi_tools',
           featureCounts="/home/dell/miniconda3/envs/scAPA/bin/featureCounts",
           star='/home/dell/miniconda3/envs/scAPA/bin/STAR')
trap.params=TRAP.PARAMS()
trap.params$chr=1:3

## input BAM
dir0='/mnt/64cf3476-350c-46ad-bc48-574fa64a0334/test/xwu/dataFly/'
inputBam=paste0(dir0, "filterCB.bam")

## log file
logf=gsub('.bam', '.scAPAtrap.log', inputBam, fixed=TRUE)

## output dir (will be under inputBam's dir)
outputDir="APA.result"

## one step scAPAtrap
initScAPAtrap(tools=tools, trap.params=trap.params,
         inputBam=inputBam, outputDir=outputDir, logf=logf)
}
## just test the function with toCheck=FALSE
initScAPAtrap(tools='just-for-fun.tools',
              trap.params=list('just-for-fun.params'),
              inputBam='just-for-fun.bam', outputDir='just-for-fun.dir', toCheck=FALSE)
trap.params
}
