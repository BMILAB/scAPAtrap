% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scAPAtrap_funlib.R
\name{TRAP.PARAMS}
\alias{TRAP.PARAMS}
\title{Get parameters to run scAPAtrap}
\usage{
TRAP.PARAMS()
}
\value{
A list of parameters with default values for running \code{\link{scAPAtrap}}.
}
\description{
Get parameters to run scAPAtrap
}
\details{
TRAP.PARAMS returns the global variable of list type to store parameters for running the wrapper function \code{\link{scAPAtrap}}.
\itemize{
\item{TenX}: Whether the inputBam is 10X-format (e.g., BAM file from CellRanger or STARsolo).
For non-10X protocols like CEL-seq, when STARsolo is used, the BAM file will also contain cell barcode tag (CB) and UMI barcode tag (UB), then can set TenX=TRUE.
\item{barcode}: string vector to define barcodes, default is NULL (not provided).
\item{chrs}: a string vector of chromosome names (e.g., chr1, chr2, chr3...), default is NULL.
This parameter is used in \code{\link{findPeaksByStrand}}.
If chrs=NULL and run one-step \code{\link{scAPAtrap}}, then will try to get all chrs from inputBAM.
However, when running \code{\link{scAPAtrap}}, if chrs=NULL and there are more than 100 chrs from inputBAM,
users should provide trap.params$chrs explicitly to run scAPAtrap just in case there are too many unuseful chrs to run.
\item{maxwidth}: max width (nt) to define a valid peak, default is 1000.
Peaks wider than `maxwidth` will be automatelly split until meet requirement.
This parameter is used in \code{\link{findPeaksByStrand}}.
\item{readlength}: R2 read length, default is 49. `readlength` determines the min peak width;
peaks wider than `readlength` will be retained.
This parameter is used in \code{\link{findPeaksByStrand}}.
\item{cov.cutoff}: min read coverage for peak calling, default is 10.
Peak regions with coverage greater than `cov.cutoff`will be considered as candidate peaks.
This parameter is used in \code{\link{findPeaksByStrand}}.
\item{min.cells}: number of cells that a peak is expressed (i.e., with read count over `min.count`), default is 10.
`min.cells` is used to filter peaks present in at least `min.cells` cells.
This parameter is used in \code{\link{reducePeaks}} and \code{\link{generatescExpMa}}.
\item{min.count}: number of read counts a peak has, default is 10.
`min.count` is used to filter peaks with at least `min.count' reads.
This parameter is used in \code{\link{reducePeaks}} and \code{\link{generatescExpMa}}.
\item{tails.search}: the strategy to search A tails, can be set `peaks`, `genome`, `no` (default). This parameter is used in the wrapper function \code{\link{scAPAtrap}}.
\describe{
\item{no }{Not search tails, which means the final peaks are not linked with any A-tails.}
\item{genome }{Search tails genome-wide, which may be suitable for small genome. Otherwise it will take very long time or MEM.}
\item{peaks }{Search tails within the peak regions by `d` nt. This way may be suitable for big genome but with relatively small number of peaks.}
}
\item{d}: min distance from a peak to any tail to call a peak as real PA, default is 100.
Only applicable when tails.search is peaks or genome. This parameter is used in \code{\link{findTailsByPeaks}} and \code{\link{generatescExpMa}}.
If provided, then the final scAPAtrapData (the PA list) will remove cells not in `barcode.`
\item{findUniqueMap}: default is TRUE, means to run \code{\link{findUniqueMap}} to get unique mappings, and/or sort/index the inputBam.
\item{findUniqueMap.sort}: default is TRUE, to sort inputBam. Only applicable when findUniqueMap=TRUE.
\item{findUniqueMap.index}: default is TRUE, to index inputBam. Only applicable when findUniqueMap=TRUE.
\item{thread}: Number of CPU threads, default is 24.
}
}
\examples{
## see TRAP.PARAMS
TRAP.PARAMS()
## set up new trap.params
trap.params=TRAP.PARAMS()
trap.params$TenX=FALSE
## set up from scratch
trap.params=list(thread=24,
                 TenX=TRUE,
                 chrs=c('2L','2R','3L','3R','4','X','Y'),
                 maxwidth=1000,
                 readlength=49,
                 cov.cutoff=10,
                 min.cells=10,
                 min.count=10,
                 tails.search='peaks',
                 d=100,
                 barcode=NULL,
                 findUniqueMap=TRUE,
                 findUniqueMap.sort=TRUE,
                 findUniqueMap.index=TRUE )
}
